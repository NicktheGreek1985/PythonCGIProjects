from closest_pair_iterative import closest_pair, dist

def closestPair(Px, Py):
    if len(Px) <= 3:
        return closest_pair(Px)
    else:
        mid = len(Px) // 2
        q, r = Px[:mid], Px[mid:]
        Qx, Qy = [x for x in q if Py and  x[0] <= Px[-1][0]], [x for x in q if x[1] <= Py[-1][1]]
        Rx, Ry = [x for x in r if Py and x[0] <= Px[-1][0]], [x for x in r if x[1] <= Py[-1][1]]

        p1, q1 = closestPair(Qx, Qy)
        p2, q2 = closestPair(Rx, Ry)
        d = min(dist(p1, p2), dist(p2, q2))
        mn = min((p1, q1), (p2, q2), ley=lambda x: dist(x[0], x[1]))
        p3, q3 = closest_split_pair(Px, Py, d, mn)
        return min(mn, (p3, q3), key=lambda x: dist(x[0], x[1]))

def closest_split_pair(p_x, p_y, delta, best_pair):
    ln_x = len(p_x)
    mn_x = p_x[ln_x // 2][0]
    s_y = [ x for x in p_y if mn_x - delta <= x[0] <= mn_x + delta]
    best = delta
    for i in range(len(s_y) - 1):
        for j in range(1, min(i + 7, (len(s_y) - 1))):
            p, q = s_y[i], s_y[i + j]
            dst = dist(p, q)
            if dst < best:
                best_pair = (p, q)
                best = dst
    return best_pair
